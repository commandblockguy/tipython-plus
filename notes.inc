; os functions
fill_rect		= $021E0C ; fills in rectangle - called with 0, 0, 320, 30
os_021E2C		= $021E2C ; args: 0, 0
os_021EF0		= $021EF0 ; used in cursor drawing
os_021DF4		= $021DF4
unfilled_rect		= $021DFC
os_021E30		= $021E30
letter_type		= $0220B4 ; 0 for non-letters, 8 for uppercase, 4 for lowercase
is_number		= $0220BC
os_022154		= $022154
os_02223C		= $02223C ; no args, called repeatedly - prolly waits
os_02229C		= $02229C
coproc_init		= $0222C0
coproc_read		= $0222C8
coproc_write		= $0222CC
os_0222F0		= $0222F0 ; no args, return s in a

; app functions
entry_point		= $35C0AB ; app entry point
set_language		= $35C94D ; does something with the language
determine_hw_type	= $343677 ; checks 83/84
draw_statusbar		= $35917C ; no args
draw_battery		= $34E497 ; sets iy to flags and draws battery indicator
draw_python_icon	= $358D41 ; called with 4, 3
draw_statusbar_text	= $35920F ; called with 0, ptr to "PYTHON  APP"
func_35C856		= $35C856 ; unknown, sets $D1884B to 50
ensure_compat		= $35CA0C ; if no integrated python / version outdated, shows a screen and exits
has_integrated_python	= $34EC4A ; returns null if no integrated python
func_3592FF		= $3592FF; called with arg 1 if no integrated python - sets $D17DD3 to its u8 argument
enable_alpha		= $35915D ; probably
draw_kb_indicator	= $358ECF
draw_string		= $3498C2 ; args: str, col, row
draw_string_px		= $34988D ; args: str, x, y
draw_char		= $349800 ; args: char, x, y
draw_button_outline	= $34B48A ; args: u8 0
mul64			= $34B81D ; multiplies arg by 64
horiz_line		= $34B79F ; args: 1, $dd, 50
vert_line		= $34B7DE
draw_button_text	= $34B53D
get_key_ext		= $34EC17
func_35C9A0		= $35C9A0 ; called if has int. python, takes one arg
set_timer		= $35BE71 ; sets timer 1 if not already active
zero_more_ram		= $343DB7 ; no args
zero_some_ram		= $343D78 ; no args
func_359952		= $359952
init_term_state		= $3594FA ; probably, args: 0
func_359567		= $359567 ; resets a bunch of flags
func_356E29		= $356E29
func_356D81		= $356D81
get_rtc_seconds		= $34E3A1
func_35BFDD		= $35BFDD ; args: 2, used in switch-case
update_run_indicator	= $3589C2
func_35941B		= $35941B
setup_apd		= $34E43B
read_setup_var		= $349666 ; looks for an archived appvar called "PYTHONSU", checks if byte 6 is '#' and 7 not '-', branches if 8 is $0a
check_appvar_valid	= $34E80A ; checks if file exists (0), in archive? (4), starts with "PYCD" (5), otherwise 3
get_appvar_data_ptr	= $34EE84 ; maybe? takes "PYTHONSU" as arg
func_35BE99		= $35BE99 ; args: 4
func_35C06F		= $35C06F ; no args
set_kb_apb_cycles	= $34EEBA
func_35A146		= $35A146
func_35A09F		= $35A09F
handle_recd_chars	= $359E0F
continue_csi		= $35A876
func_359A14		= $359A14 ; called in handle_recd_chars if ($D17DDF) != $3c
etx_handler		= $35A6F7
func_35B241		= $35B241 ; esc. seq handler?
handle_esc		= $35A840
handle_backspace	= $3596E2 ; takes 1 argument - whether to backspace across rows?
scroll_screen		= $34E3AC ; scrolls screen down?
scroll_term		= $3599A8 ; scrolls term. chars but not screen
; check these next two
handle_reg_char		= $359CCA ; takes $0020 as argument for tabs
handle_spec_char	= $35B1D3 ; takes char >= $80 as argument
func_35A429		= $35A429 ; does something with the coprocessor connection
func_3597DB		= $3597DB
draw_cursor		= $359726 ; probably?
csi_handle_semi		= $35AA62
csi_case_D		= $35A94D
csi_case_G		= $35A963
csi_case_H		= $35AA29
csi_case_J		= $35A96B
csi_case_K		= $35A988
csi_case_k		= $35A9A7
csi_case_m		= $35A9B4
csi_G_handler		= $35AB9C ; uninvestigated
erase_display		= $3595A7 ; uninvestigated
erase_in_line		= $359826
csi_k_handler		= $35AA95 ; handles alpha state
set_kb_indicator	= $3436AC ; probably also has something to do with alpha state
erase_kb_indicator	= $358E96
keypress_handler_01	= $347EC5
long_keypress_thing	= $34F13D ; takes a key code as input and returns a bool, skips switch/case if true
func_349648		= $349648 ; called when "manage" menu pressed
get_D17895_6		= $342790 ; called with args $D1794D, $D1794E, 0 - copies its two 1-byte args to $D17895-6
set_D17895_6		= $3427AE
clear_main_screen	= $34A55E ; erases everything but status bar and buttons
func_34B44D		= $34B44D ; multiplies arg by $2180 and adds $d45000
memcpy_2_elec_boogaloo	= $34E38A
clear_buttons		= $34B5CD ; and maybe more, idk
draw_horiz_rule		= $343497 ; draws a line in one specific position or something - arg is color
func_34274F		= $34274F ; does something, returns an empty string
draw_esc_btn		= $34B6B4
func_34F1D4		= $34F1D4 ; sets $D17CDA to its arg, a function pointer
print_version		= $349051 ; prints "Python App:v" + version string
get_version_string	= $34E700
update_indic_by_key	= $3436D7 ; takes getcsc code as arg
func_34F096		= $34F096 ; takes getcsc code as arg, called if keypress_callback isn't
key_handler_349184	= $349184
enter_handler		= $349585 ; handles enter key under $349184
func_34A635		= $34A635 ; takes keypress as arg
func_34A947		= $34A947 ; args: 0, ?, keypress
draw_about_screen	= $34844A
draw_ti_logo		= $34E721
erase_status_text	= $358E28 ; arg: row
draw_cent_blue_text	= $34343E ; args: string, row
draw_rect		= $34E6D8
func_34E861		= $34E861 ; called if PYTHONSU exists
unarchive_appvar	= $34EE51 ; arg: name
delete_appvar		= $34E86B ; arg: appvar name

; data
font			= $34E687
csi_switch_case		= $35A92C
csi_g_switch_case	= $35ABBD
hw_data_83		= $35CFED
hw_data_84		= $35D299
str_PYTHONSU		= $35D680 ; "PYTHONSU"
python_icon		= $360BC3 ; seems to run until $360C4D
maybe_color_table	= $360C4D ; color table
ascii_ack		= $360C8E ; $06 / ascii ACK
kb_mode_table		= $360C94 ; 0, 1, 5, 3, 7; indexed by arg to CSI k
data_360D79		= $360D79 ; unknown, accessed after checking for integrated python
data_360DBB		= $360DBB ; unknown, accessed when there's no integrated python?
fn_ptr_table_table	= $360D01 ; contains some number of $15 byte entries

; ram
ram_D00BE6		= $D00BE6 ; $98 bytes long
ram_D00C7E		= $D00C7E ; $98 bytes long
rec_buf			= $D052C6 ; pixelShadow2
term_graphics_state	= $D0ECDF ; $8E0 bytes, init. to $70 - terminal graphics state?
ram_D17888		= $D17888 ; might be the currently selected menu item?
text_color		= $D1788A ; 2 byte, init. to 0 - fg color?
bg_color		= $D1788C ; 2 byte, init. to $FFFF - bg color?
lang_table_ptr		= $D1788E
ram_D17895		= $D17895 ; ti has a getter and setter for these next two - probably a backup of current screen?
ram_D17896		= $D17896
ram_D1789A		= $D1789A ; checked if 0 during 34274F
ram_D178B4		= $D178B4 ; has a string copied to it
kb_indicator		= $D1790A ; bit 0 = alpha, bit 1 = uppercase, bit 2 = alpha lock, bit 3 = 2nd?
rtc_seconds		= $D1790B ; set to the RTC's second counter???
hw_type_data		= $D1790C ; a pointer to some data which is different between the 83/84
ram_D1792E		= $D1792E ; 1 byte, init. to 0
ram_D17944		= $D17944 ; 1 byte, init. to 0
current_screen		= $D1794B ; 6 = about screen
ram_D1794D		= $D1794D ; prolly bkp of current screen?
ram_D1794E		= $D1794E ; prolly bkp of current screen?
ram_D17959		= $D17959 ; contains a pointer to the ROM
ram_D17993		= $D17993 ; 1 byte, init. to 0
other_key_callback	= $D17CDA ; a function pointer
ram_D17DCD		= $D17DCD ; pointer to a $3B1 byte memory region
ram_D17DD0		= $D17DD0 ; pointer to some struct
ram_D17DD3		= $D17DD3 ; set to 1 if no integrated python
ram_D17DD4		= $D17DD4 ; has something to do with the kb indicator
ram_D17DD5		= $D17DD5
rec_buf_len		= $D17DD6
conn_status		= $D17DDB ; set to 2 when stuff's working properly
cursor_active		= $D17DDC
cursor_col		= $D17DDD ; 1 byte, init. to 0
cursor_row		= $D17DDE ; 1 byte, init. to 0
ram_D17DDF		= $D17DDF ; 1 byte, init. to $3c
term_chars		= $D17DE0 ; $8E0 bytes, init. to $20 - terminal state?
terminal_shown		= $D186C1 ; might just be whether the screen is up-to-date?
some_status		= $D186C2 ; some status thing - set to 1 initially
csi_active1		= $D186C3 ; whether a CSI sequence is in progress
esc_active		= $D186D2
ram_D186D6		= $D186D6 ; 1 byte, init. to 0 - probably some terminal display flag
csi_args		= $D186E2
num_csi_args		= $D18814 ; set to 1
csi_curr_arg		= $D18815
csi_curr_arg_set	= $D18818 ; whether the current argument has been set
csi_active2		= $D18819 ; reset on ESC char, set to 1 in continue_csi
ram_D1883B		= $D1883B ; some sort of status
keypress_callback	= $D18845
ram_D18848		= $D18848 ; 1 byte, set to 1
ram_D1884B		= $D1884B ; unknown, set to 50 by $35C856
fn_ptr_table_ptr	= $D18850 ; ptr to table of fn pointers
current_key_callback	= $D18853 ; whether to use other_key_callback (1) or keypress_callback (0)
app_ram_end		= $D1887C
